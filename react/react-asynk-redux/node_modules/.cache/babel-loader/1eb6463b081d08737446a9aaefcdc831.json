{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from 'nanoid';\nconst sliceContacts = createSlice({\n  name: 'contacts',\n  initialState: [],\n  reducers: {\n    addContact: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(data) {\n        const newContact = { ...data,\n          id: nanoid()\n        };\n        return {\n          payload: newContact\n        };\n      }\n\n    },\n\n    deleteContacts(state, action) {\n      return state.filter(item => item.id !== action.payload);\n    }\n\n  }\n});\nexport const contactsReducer = sliceContacts.reducer;\nexport const {\n  actions\n} = sliceContacts;","map":{"version":3,"sources":["/Users/katerynamuzyka/Documents/studing/react/react-phoneBook-redux/src/redux/sliceContacts.js"],"names":["createSlice","nanoid","sliceContacts","name","initialState","reducers","addContact","reducer","state","action","push","payload","prepare","data","newContact","id","deleteContacts","filter","item","contactsReducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,MAAMC,aAAa,GAAGF,WAAW,CAAC;AAC9BG,EAAAA,IAAI,EAAE,UADwB;AAE9BC,EAAAA,YAAY,EAAE,EAFgB;AAG9BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAC;AACPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACnBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACH,OAHM;;AAIPC,MAAAA,OAAO,CAACC,IAAD,EAAM;AACT,cAAMC,UAAU,GAAG,EACf,GAAGD,IADY;AAEfE,UAAAA,EAAE,EAAEd,MAAM;AAFK,SAAnB;AAGA,eAAO;AACHU,UAAAA,OAAO,EAAEG;AADN,SAAP;AAGH;;AAXM,KADL;;AAcNE,IAAAA,cAAc,CAACR,KAAD,EAAQC,MAAR,EAAe;AACzB,aAAOD,KAAK,CAACS,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYN,MAAM,CAACE,OAAxC,CAAP;AACH;;AAhBK;AAHoB,CAAD,CAAjC;AAuBA,OAAO,MAAMQ,eAAe,GAAGjB,aAAa,CAACK,OAAtC;AACP,OAAO,MAAM;AAACa,EAAAA;AAAD,IAAYlB,aAAlB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from 'nanoid';\n\nconst sliceContacts = createSlice({\n    name: 'contacts',\n    initialState: [],\n    reducers: {\n        addContact:{\n            reducer(state, action) {\n                state.push(action.payload);\n            },\n            prepare(data){\n                const newContact = {\n                    ...data,\n                    id: nanoid(),}\n                return {\n                    payload: newContact,\n                }\n            },\n        },\n        deleteContacts(state, action){\n            return state.filter(item => item.id !== action.payload )\n        }, \n    }\n});\n\nexport const contactsReducer = sliceContacts.reducer;\nexport const {actions} = sliceContacts;"]},"metadata":{},"sourceType":"module"}