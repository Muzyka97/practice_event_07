{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // import { nanoid } from 'nanoid';\n\nimport { fetchContacts, addContacts } from './operation';\n\nconst handlePending = state => {\n  state.isLoading = true;\n};\n\nconst handleRejected = (state, action) => {\n  state.isLoading = false;\n  state.error = action.payload;\n};\n\nconst sliceContacts = createSlice({\n  name: 'contacts',\n  initialState: {\n    items: [],\n    isLoading: false,\n    error: null\n  },\n  extraReducers: {\n    [fetchContacts.pending]: handlePending,\n\n    [fetchContacts.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null, state.items = action.payload;\n    },\n\n    [fetchContacts.rejected]: handleRejected,\n    [addContacts.pending]: handlePending,\n\n    [addContacts.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.items.push(action.payload);\n    },\n\n    [addContacts.rejected]: handleRejected\n  }\n}); // reducers: {\n//     addContact:{\n//         reducer(state, action) {\n//             state.push(action.payload);\n//         },\n//         prepare(data){\n//             const newContact = {\n//                 ...data,\n//                 id: nanoid(),}\n//             return {\n//                 payload: newContact,\n//             }\n//         },\n//     },\n//     deleteContacts(state, action){\n//         return state.filter(item => item.id !== action.payload )\n//     }, \n// }\n// });\n\nexport const contactsReducer = sliceContacts.reducer;\nexport const {\n  actions\n} = sliceContacts;","map":{"version":3,"sources":["/Users/katerynamuzyka/Documents/studing/react/react-asynk-redux/src/redux/sliceContacts.js"],"names":["createSlice","fetchContacts","addContacts","handlePending","state","isLoading","handleRejected","action","error","payload","sliceContacts","name","initialState","items","extraReducers","pending","fulfilled","rejected","push","contactsReducer","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,aAA3C;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC3BA,EAAAA,KAAK,CAACC,SAAN,GAAkB,IAAlB;AACD,CAFH;;AAGE,MAAMC,cAAc,GAAG,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACxCH,EAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACAD,EAAAA,KAAK,CAACI,KAAN,GAAcD,MAAM,CAACE,OAArB;AACD,CAHD;;AAKF,MAAMC,aAAa,GAAGV,WAAW,CAAC;AAC9BW,EAAAA,IAAI,EAAE,UADwB;AAE9BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVR,IAAAA,SAAS,EAAE,KAFD;AAGVG,IAAAA,KAAK,EAAE;AAHG,GAFgB;AAO9BM,EAAAA,aAAa,EAAE;AACX,KAACb,aAAa,CAACc,OAAf,GAAyBZ,aADd;;AAEX,KAACF,aAAa,CAACe,SAAf,EAA0BZ,KAA1B,EAAiCG,MAAjC,EAAyC;AACpCH,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACDD,MAAAA,KAAK,CAACI,KAAN,GAAc,IAAd,EACAJ,KAAK,CAACS,KAAN,GAAcN,MAAM,CAACE,OADrB;AAEH,KANU;;AAOX,KAACR,aAAa,CAACgB,QAAf,GAA2BX,cAPhB;AASX,KAACJ,WAAW,CAACa,OAAb,GAAuBZ,aATZ;;AAUX,KAACD,WAAW,CAACc,SAAb,EAAwBZ,KAAxB,EAA+BG,MAA/B,EAAuC;AACnCH,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACAD,MAAAA,KAAK,CAACI,KAAN,GAAc,IAAd;AACAJ,MAAAA,KAAK,CAACS,KAAN,CAAYK,IAAZ,CAAiBX,MAAM,CAACE,OAAxB;AACD,KAdQ;;AAeX,KAACP,WAAW,CAACe,QAAb,GAAwBX;AAfb;AAPe,CAAD,CAAjC,C,CAyBI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;AAEA,OAAO,MAAMa,eAAe,GAAGT,aAAa,CAACU,OAAtC;AACP,OAAO,MAAM;AAACC,EAAAA;AAAD,IAAYX,aAAlB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n// import { nanoid } from 'nanoid';\nimport { fetchContacts, addContacts } from './operation';\n\nconst handlePending = state => {\n    state.isLoading = true;\n  };\n  const handleRejected = (state, action) => {\n    state.isLoading = false;\n    state.error = action.payload;\n  };\n\nconst sliceContacts = createSlice({\n    name: 'contacts',\n    initialState: {\n        items: [],\n        isLoading: false,\n        error: null,\n    },\n    extraReducers: {\n        [fetchContacts.pending]: handlePending,\n        [fetchContacts.fulfilled](state, action) {\n             state.isLoading = false;\n            state.error = null,\n            state.items = action.payload\n        },\n        [fetchContacts.rejected] : handleRejected,\n\n        [addContacts.pending]: handlePending,\n        [addContacts.fulfilled](state, action) {\n            state.isLoading = false;\n            state.error = null;\n            state.items.push(action.payload);\n          },\n        [addContacts.rejected]: handleRejected,\n      },\n    })\n    // reducers: {\n    //     addContact:{\n    //         reducer(state, action) {\n    //             state.push(action.payload);\n    //         },\n    //         prepare(data){\n    //             const newContact = {\n    //                 ...data,\n    //                 id: nanoid(),}\n    //             return {\n    //                 payload: newContact,\n    //             }\n    //         },\n    //     },\n    //     deleteContacts(state, action){\n    //         return state.filter(item => item.id !== action.payload )\n    //     }, \n    // }\n// });\n\nexport const contactsReducer = sliceContacts.reducer;\nexport const {actions} = sliceContacts;"]},"metadata":{},"sourceType":"module"}